--- libgcrypt-1.6.5/configure.ac.orig	Tue Feb 16 17:11:05 2016
+++ libgcrypt-1.6.5/configure.ac	Tue Feb 16 17:13:07 2016
@@ -1195,7 +1195,37 @@
      [Defined if inline assembler supports BMI2 instructions])
 fi
 
+#
+# Check whether GCC assembler needs "-Wa,--divide" to correctly handle
+# constant division
+#
+if test $amd64_as_feature_detection = yes; then
+  AC_CACHE_CHECK([whether GCC assembler handles division correctly],
+       [gcry_cv_gcc_as_const_division_ok],
+       [gcry_cv_gcc_as_const_division_ok=no
+        AC_COMPILE_IFELSE([AC_LANG_SOURCE(
+          [[__asm__("xorl \$(123456789/12345678), %ebp;\n\t");]])],
+          [gcry_cv_gcc_as_const_division_ok=yes])])
+  if test "$gcry_cv_gcc_as_const_division_ok" = "no" ; then
+    #
+    # Add '-Wa,--divide' to CFLAGS and try check again.
+    #
+    _gcc_cflags_save="$CFLAGS"
+    CFLAGS="$CFLAGS -Wa,--divide"
+    AC_CACHE_CHECK([whether GCC assembler handles division correctly with "-Wa,--divide"],
+         [gcry_cv_gcc_as_const_division_with_wadivide_ok],
+         [gcry_cv_gcc_as_const_division_with_wadivide_ok=no
+          AC_COMPILE_IFELSE([AC_LANG_SOURCE(
+            [[__asm__("xorl \$(123456789/12345678), %ebp;\n\t");]])],
+            [gcry_cv_gcc_as_const_division_with_wadivide_ok=yes])])
+    CFLAGS="$_gcc_cflags_save"
+    if test "$gcry_cv_gcc_as_const_division_ok" = "yes" ; then
+      CFLAGS="$CFLAGS -Wa,--divide"
+    fi
+  fi
+fi
 
+
 #
 # Check whether GCC assembler supports features needed for our amd64
 # implementations
@@ -1217,6 +1247,11 @@
 		"asmfunc:\n\t"
                 ".size asmfunc,.-asmfunc;\n\t"
                 ".type asmfunc,@function;\n\t"
+		/* Test if assembler allows use of '/' for constant division
+		 * (Solaris/x86 issue). If previous constant division check
+		 * and "-Wa,--divide" workaround failed, this causes assembly
+		 * to be disable on this machine. */
+		"xorl \$(123456789/12345678), %ebp;\n\t"
             );]])],
           [gcry_cv_gcc_amd64_platform_as_ok=yes])
         fi])
