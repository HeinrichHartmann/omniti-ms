--- inspircd-2.0.14/src/modules/extra/m_ldapauth.cpp.orig	Tue Oct  8 15:04:51 2013
+++ inspircd-2.0.14/src/modules/extra/m_ldapauth.cpp	Tue Oct  8 15:04:58 2013
@@ -106,6 +106,8 @@
 	std::string password;
 	std::string vhost;
 	std::vector<std::string> whitelistedcidrs;
+	std::vector<std::string> allownickpatterns;
+	std::vector<std::string> allowidentpatterns;
 	std::vector<std::pair<std::string, std::string> > requiredattributes;
 	int searchscope;
 	bool verbose;
@@ -139,6 +141,8 @@
 	{
 		ConfigTag* tag = ServerInstance->Config->ConfValue("ldapauth");
 		whitelistedcidrs.clear();
+		allownickpatterns.clear();
+		allowidentpatterns.clear();
 		requiredattributes.clear();
 
 		base 			= tag->getString("baserdn");
@@ -161,6 +165,14 @@
 			if (!cidr.empty()) {
 				whitelistedcidrs.push_back(cidr);
 			}
+			std::string wlnick = i->second->getString("nick");
+			if (!wlnick.empty()) {
+				allownickpatterns.push_back(wlnick);
+			}
+			std::string wlident = i->second->getString("ident");
+			if (!wlident.empty()) {
+				allowidentpatterns.push_back(wlident);
+			}
 		}
 
 		ConfigTagList attributetags = ServerInstance->Config->ConfTags("ldaprequire");
@@ -253,8 +265,24 @@
 			return MOD_RES_PASSTHRU;
 		}
 
-		for (std::vector<std::string>::iterator i = whitelistedcidrs.begin(); i != whitelistedcidrs.end(); i++)
+		std::vector<std::string>::iterator i;
+		for (i = allownickpatterns.begin(); i != allownickpatterns.end(); i++)
 		{
+			if (InspIRCd::Match(user->nick, *i)) {
+				ldapAuthed.set(user,1);
+				return MOD_RES_PASSTHRU;
+			}
+		}
+		for (i = allowidentpatterns.begin(); i != allowidentpatterns.end(); i++)
+		{
+			if (InspIRCd::Match(user->ident, *i)) {
+				ldapAuthed.set(user,1);
+				return MOD_RES_PASSTHRU;
+			}
+		}
+
+		for (i = whitelistedcidrs.begin(); i != whitelistedcidrs.end(); i++)
+		{
 			if (InspIRCd::MatchCIDR(user->GetIPString(), *i, ascii_case_insensitive_map))
 			{
 				ldapAuthed.set(user,1);
